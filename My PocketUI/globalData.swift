//
//  globalData.swift
//  My PocketUI
//
//  Created by Luca Hummel on 20/07/21.
//

import Foundation

// MARK: - Swift Data

var swiftData = [try! CoreDataStackDocumentation.createDocumentation(title: "Transformar vetor em string", information: "Criamos uma váriavel ou constante que usará o nosso vetor, nesse vetor vamos aplicar o método 'joined(separator: )' que irá juntar todo o vetor em uma string de acordo com um separador, por exemplo, eu quero juntar um vetor em uma string separando os elementos a partir de vírgula:\n/**/let minhaString = meuVetor.joined(separator: ',')/*", isEditable: false, myContent: "Swift"), try! CoreDataStackDocumentation.createDocumentation(title: "Passar dados entre Views", information: "Primeiro adicione o identifier 'transitionDiscover' na segue (conexão entre as duas ViewControllers)\nDepois insira esse código:\n/**/override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if segue.identifier == 'transitionDiscover {\n            let discoverViewController = segue.destination as? DiscoverViewController\n            discoverViewController?.card=indice\n        }\n}/*\nNesse código estamos transferindo o valor da variável indice da ViewController 'ViewController' para a variável card de 'DiscoverViewController'. No seu código você precisa ter cuidados com algumas coisas: alterar o segue.identifier para o identifier que vocÊ definiu e alterar a classe da View que você quer ser direcionado (No caso queremos a View 'DiscoverViewController').", isEditable: false, myContent: "Swift"), try! CoreDataStackDocumentation.createDocumentation(title: "Sortear número inteiro", information: "Basta utilizarmos o método random(in:) do tipo de dado Int, por exemplo, quero sortear um número inteiro entre 0 e 2:\n/**/var number = Int.random(in: 0...2)/*\nReferência:/btnhttps://www.hackingwithswift.com/read/2/4/guess-which-flag-random-numbers/btn", isEditable: false, myContent: "Swift"), try! CoreDataStackDocumentation.createDocumentation(title: "Embaralhar vetor", information: "Os dois métodos que mais utilizamos para fazer isso é o shuffle() e o shuffled(), o primeiro embaralha o vetor em si e o segundo cria um novo vetor igual ao escolhido e embaralha:\n/**/var strings = ['Oh', 'Hello', 'World', 'This', 'Is', 'An', 'Unsorted', 'Array']\n\nstrings.shuffle()\n\nlet sorted = strings.shuffled()/*\nReferência:/btnhttps://stackoverflow.com/questions/24026510/how-do-i-shuffle-an-array-in-swift/btn", isEditable: false, myContent: "Swift"), try! CoreDataStackDocumentation.createDocumentation(title: "Deixar String maiúscula ou minúscula", information: "Precisamos apenas usar dois métodos que o tipo String possui: uppercased() para deixar tudo maiúsculo e lowercased() para deixar minúsculo:\n/**/minhaString.uppercased()\n\nminhaString.lowercased()/*\nReferências:/btnhttps://developer.apple.com/documentation/swift/string/1640996-uppercased/btn\n/btnhttps://developer.apple.com/documentation/swift/string/1641392-lowercased/btn", isEditable: false, myContent: "Swift")]

// MARK: - Navigation bar Data

var navigationBarData = [try! CoreDataStackDocumentation.createDocumentation(title: "Alterar título", information: "Precisamos apenas alterar o valor da váriavel 'title' dentro da viewDidLoad():\n/**/title = 'Storm Viewer'/*", isEditable: false, myContent: "Navigation Bars"), try! CoreDataStackDocumentation.createDocumentation(title: "Deixar título grande", information: "Para realizar tal mudança precisamos alterar para 'true' o atributo 'prefersLargeTitles' da navigationBar:\n/**/navigationController?.navigationBar.prefersLargeTitles = true/*\nMas cuidado! Quando você altera esse atributo essa mudança é realizada em todas as outras views, para contornar esse problema precisamos colocar nas outras views que não queremos título grande o seguinte código:\n/**/navigationItem.largeTitleDisplayMode = .never/*\nReferência:/btnhttps://www.hackingwithswift.com/read/1/6/final-tweaks-hidesbarsontap-safe-area-margins/btn", isEditable: false, myContent: "Navigation Bars"), try! CoreDataStackDocumentation.createDocumentation(title: "Alterar cor", information: "Precisamos alterar a cor do atributo 'barTintColor' da navigationBar, por exemplo, quero deixar a NavigationBar branca:\n/**/navigationController?.navigationBar.barTintColor = .white/*\nReferência:/btnhttps://stackoverflow.com/questions/24687238/changing-navigation-bar-color-in-swift/btn", isEditable: false, myContent: "Navigation Bars"), try! CoreDataStackDocumentation.createDocumentation(title: "Colocar imagem como título", information: "Primeiro precisamos criar uma nova imageView (precisa ser no código porque a NavigationBar não permite no storyboard):\n/**/var imageView: UIImageView = UIImageView()/*\nComo vamos usar uma imagem na NavigationBar precisamos setar isso com código, para isso vamos substituir o título por uma ImageView na viewDidLoad():\n/**/imageView.image = UIImage(named: 'imagesCoracoes')\nimageView.contentMode = .scaleAspectFit\nself.navigationItem.titleView = imageView/*\nMudamos o contentMode para .scaleAspectFit para deixar a imagem no tamanho e proporção corretos para o tamanho do título.", isEditable: false, myContent: "Navigation Bars"), try! CoreDataStackDocumentation.createDocumentation(title: "Retornar 1 tela", information: "Precisamos apenas utilizar o método 'popViewController' da navigationController.\n/**/navigationController?.popViewController(animated: true)/*", isEditable: false, myContent: "Navigation Bars"), try! CoreDataStackDocumentation.createDocumentation(title: "Retornar 2 telas ou mais", information: "Vamos criar uma função que retorna duas telas e quando precisar fazer essa ação basta chama-la. Primeiro precisamos criar um vetor com todas as viewControllers abertas, com isso nós sabemos quantas tem e quais suas posições, depois basta dar um popViewController para a View que nós queremos (você faz isso pelo indice do vetor, no caso para voltar duas é necessário subtrair por 3).\n/**/func backTwo() {\n        let viewControllers: [UIViewController] = self.navigationController!.viewControllers as [UIViewController]\n        self.navigationController!.popToViewController(viewControllers[viewControllers.count - 3], animated: true)\n    }/*", isEditable: false, myContent: "Navigation Bars"), try! CoreDataStackDocumentation.createDocumentation(title: "Esconder botão de Back", information: "Precisamos apenas definir o atributo 'setHidesBackButton' como true:\n/**/self.navigationItem.setHidesBackButton(true, animated: true)/*\nReferência:/btnhttps://stackoverflow.com/questions/27373812/swift-how-to-hide-back-button-in-navigation-item/btn", isEditable: false, myContent: "Navigation Bars")]

// MARK: - Status Bar Data

var statusBarData = [try! CoreDataStackDocumentation.createDocumentation(title: "Alterar cor", information: "Arquivo geral do app → Status bar Style\ninfo.plist → View controller-based status bar appearance = NO\n\nReferência:\n/btnhttps://www.youtube.com/watch?v=dbAUm4_J8SY/btn", isEditable: false, myContent: "Status Bars")]

// MARK: - TextView Data

var textViewData = [try! CoreDataStackDocumentation.createDocumentation(title: "Desabilitar edição do usuário", information: "Mudamos o valor de seu atributo 'isEditable':\n/**/texto1.isEditable = false/*", isEditable: false, myContent: "Text Views")]

// MARK: - Progress Indicators Data

var progressViewData = [try! CoreDataStackDocumentation.createDocumentation(title: "Implementar", information: "1. Crie uma nova ProgressView no storyboard\n2. Conecte essa View no código\n/**/@IBOutlet weak var progressView: UIProgressView!/*\n3. Crie uma constante que guardará a quantidade de etapas que essa View vai ter\n/**/let progresso = Progress(totalUnitCount: 10)/*\n4. Crie um botão e conecte sua ação no código\n5. Nesta função toda vez que clicar no botão o progresso será acrescentado em 1, vamos transformar o progresso atual em um número Float e depois vamos setar o Progresso na View\n/**/@IBAction func didTapStartProgress(_ sender: Any) {\n        if progresso.isFinished {\nprogressView.progress = 0 \n            progresso = Progress(totalUnitCount: 10)\n        } else {\n            self.progresso.completedUnitCount += 1 // +1 etapa\nlet progressFloat = Float(self.progresso.fractionCompleted)\n            self.progressView.setProgress(progressFloat, animated: true)\n        }\n    }/*", isEditable: false, myContent: "Progress Indicators"), try! CoreDataStackDocumentation.createDocumentation(title: "Com tempo", information: "Caso queira fazer com tempo basta alterar a função do botão que dará início ao progresso da ProgressView:\n/**/@IBAction func didTapStartProgress(_ sender: Any) {\n       Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { (timer) in\n            guard self.progresso.isFinished == false else {\n                timer.invalidate()\n                return\n            }\n            self.progresso.completedUnitCount += 1\n            let progressFloat = Float(self.progresso.fractionCompleted)\n            self.progressView.setProgress(progressFloat, animated: true)\n        }\n    }/*\nReferência:/btnhttps://www.youtube.com/watch?v=BEQTE5jnb8U/btn/btnhttps://developer.apple.com/documentation/uikit/uiprogressview/btn/btnhttps://github.com/Lugaba/POC-ProgressBar/blob/main/POC-ProgressBar/ViewController.swift/btn", isEditable: false, myContent: "Progress Indicators"), try! CoreDataStackDocumentation.createDocumentation(title: "Mudar o tamanho", information: "Precisamos alterar o atributo 'transform' da progressView, usados scaledBy que multiplicará o tamanho em X por um valor e o tamanho em Y por outro. Por exemplo, quero que o tamanho em X continue o mesmo (então multiplico por 1 para não alterar o valor) e quero deixar sua largura 5 vezes maior (multiplico 5 vezes o tamanho em Y):\n/**/progressView.transform = progressView.transform.scaledBy(x: 1, y: 5)/*\nReferência:/btnhttps://www.youtube.com/watch?v=BEQTE5jnb8U/btn", isEditable: false, myContent: "Progress Indicators")]

// MARK: - Labels Data

var labelsData = [try! CoreDataStackDocumentation.createDocumentation(title: "Implementar", information: "Para colocar um texto na tela nós precisamos utilizar a classe UILabel(), então primeiro criamos uma instância dela:\n/**/var texto = UILabel()/*\nAgora que temos uma instância, nós podemos modificar alguns atributos dessa variavel, como cor, conteúdo, tamanho da fonte e outros:\n/**/texto.font = UIFont(name: 'AppleColorEmoji', size: 50)\ntexto.textColor = .white\ntexto.text = ?'\ntexto.layer.cornerRadius = 80/*\nCom as configurações feitas nós devemos adicionar essa SubView em nossa View:\n/**/view.addSubview(texto)/*", isEditable: false, myContent: "Labels"), try! CoreDataStackDocumentation.createDocumentation(title: "Alterar texto", information: "Precisamos apenas alterar o valor do atributo text' da Label:\n/**/minhaLabel.text = 'Acabei de alterar o texto/*", isEditable: false, myContent: "Labels"), try! CoreDataStackDocumentation.createDocumentation(title: "Alterar fonte", information: "Devemos trocar o atributo 'font' da Label por uma valor do tipo UIFont, nesse caso eu quero deixar o texto com a fonte 'AppleColorEmoji' com tamanho 50:\n/**/minhaLabel.font = UIFont(name: 'AppleColorEmoji', size: 50)/*", isEditable: false, myContent: "Labels"), try! CoreDataStackDocumentation.createDocumentation(title: "Alterar cor do texto", information: "Precisamos apenas alterar a cor do atributo textColor' da Label, por exemplo, quero deixar o texto em branco:\n/**/minhaLabel.textColor = .white/*", isEditable: false, myContent: "Labels")]

var createData = [navigationBarData, statusBarData, textViewData, progressViewData, labelsData, swiftData]
